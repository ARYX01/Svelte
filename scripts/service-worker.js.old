'use strict';

// Update cache names any time any of the cached files change.
const CACHE_NAME = 'static-cache-v1';

// Add list of files to cache here.
const FILES_TO_CACHE = [
	'/',
	'/global.css',
	'/manifest.json',
	// Dynamic generated assets need to be set each time after rebuild
	'/assets/index.*.js', //not working
	'/assets/index.*.css',//not working
	// Import icons and images one by one
	'/icons/*.png',//not working
];

// INSTALL ServiceWorker
self.addEventListener('install', event => {
	console.log('[ServiceWorker] Install');

	event.waitUntil(
		caches.open(CACHE_NAME)
		.then(cache => {
			console.log('[ServiceWorker] Pre-caching offline page');
			return cache.addAll(FILES_TO_CACHE);
		})
	);

	self.skipWaiting();
});

// ACTIVATE ServiceWorker
self.addEventListener('activate', event => {
	console.log('[ServiceWorker] Activate');
	// Remove previous cached data from disk.
	event.waitUntil(
		caches.keys()
		.then((keyList) => {
			return Promise.all(keyList.map(key => {
				if (key !== CACHE_NAME) {
					console.log('[ServiceWorker] Removing old cache', key);
					return caches.delete(key);
				}
			}));
		})
	);

	self.clients.claim();
});

// ServiceWorker LISTEN FOR REQUESTs
self.addEventListener('fetch', event => {
	console.log('[ServiceWorker] Fetch', event.request.url);
	// Add fetch event handler here.
	
	// Not a page navigation, bail.
	if (event.request.mode !== 'navigate') 
		return;
	event.respondWith(
		// CACHE FIRST
		/*caches.match(event.request)
		.then(cachedResponse => {
			// It can update the cache to serve updated content on the next request
			return cachedResponse || fetch(event.request);
		}*/
		// NETWORK FIRST
		/*fetch(event.request)
		.catch(() => {
			return cache.match(event.request);
		})*/
		// Stale While Revalidate
		caches.match(event.request).then(cachedResponse => {
			const networkFetch = fetch(event.request).then(response => {
				// update the cache with a clone of the network response
				caches.open(CACHE_NAME)
				.then(cache => {
					cache.put(event.request, response.clone());
				});
			});
			// prioritize cached response over network
			return cachedResponse || networkFetch;
		}
	);
});